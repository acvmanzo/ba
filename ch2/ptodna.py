import numpy as np
import operator
import cmnstepic as cs
import itertools
import cProfile
import pstats
import sys

#sys.setrecursionlimit(10)

DNACODONFILE = 'DNA_codon_table_1.txt'
GENOMEFILE = 'B_brevis.txt'

DNA = 'ATGGCCATGGCCCCCAGAACTGAGATCAATAGTACCCGTATTAACGGGTGA'
PEP = 'MA'

#ANS = ['ATGGCC',
     #'GGCCAT',
     #'ATGGCC',]
     

#DNA = 'TTCGAATCCGTATTGCTTTGGTTGGTTGAGAGAGCGACCTACATTGCTAGTCAGAATAGGTGATTCACACAAAGCTTAGCACCTGGGCAGCACCCCGTGATGTAAACCTATGGGAACTAAGGGAGTCCTGCGGTTTTAGCCAGCAAGCGAGCCGGCAGGAACACTCATACCATCGGACGCGTTTGACGCCTCCCCGGAAAGGAAGTATTTGAGCCTCATTATTACGTATTGCCCGTTAGTCGACAAATCAAGCCCTCGTACGCAGCTTATTCGTACGACGTGGAGGCGTTCCCACGGGCCTAACACGATTGGAACACCACCATAGTAGTGTGGTTCAAATACCTCCTTTGGAGATCTAGAGCTTCACTCTGATTCTAGAGGCAACTTTACAATCGCTCTACGAAATTGTATGGACATCATCAACCGGATATTCTGGGGCGGTAGAATTTCTTTTGTTCGAATCGCTCTAGGCCAGGATCAAATTAATTGAATTGCGGACTCAAGGATCGCGATAGCCGACACATCGGACGCTGTAGAAAGCCAGTCTCTGGATTTAATCCACCCTCTATGTTTGACAAAGCACTAAAACGGGATAGTTTCGGGTGGTATAAGTTTCCCAAGACGATTGCATCGCAATTCATCAACAACCATGAACTTACTGTTTTAGTACTTCCACACACCTTGTTAAATTACGCCTTTACTTCATGTTGCGGTGTGTGTTAGATAGTGTGCAGCTACAAGTCTACCGCCATCGCAGCTCGGGATACCGGCAGATGAGATGGTCCTGAGCTCGTACCGGACTCAAACTTTTTCCTTTACTACCTAGGAATCGCCCATGCGAATTTGTCGGACACACACCATTACATTAACGTCACAACAGCTACTGTTAGAATTTTGCTCTTGCAAATCCTGGAAAGAGTTAAAAAAACTCTTCCGCGCGCCAATAGGGTAAATAATAGATAGCCAGACGGCTGTAAGAGGTGATGACATTTGCAACAATCATGCTGTCGCATCTTCCGCAAGTTCATGTCGCGCCTAGGCAATGGATCTGCGAATGGGGGCCACGGGGTATGAACTACGGAATTCTAAGAAAGTTGCCATCCAGAGTTAAGGGTTTGAGGCTAGTTGCATCGCTGGTAACGAACTACCTCATTACTTGGACGCGCAGTGTGACTTCACTCCTGTATAGCGATGATGCCAAGCAGGAATTAGCAAATCTGAAGAGCGTTTCCAAACTGGCCACTTGGACTGACACCTATCGCGGGGGATTTCAGCGCGTGTCGCTCTCACATGAGAGCTGCCGTCAGGAGCGGTAGAGTTTAGAGAGGAATGCGACAAACTCCCTATTCACCTCTCTGGTGATGTAAGGATATTTACGCTTAGTTCTATGCCAGGCTTAGGGCCTCTCGGAACTTTGGTGAGTCCTTATTAATTGATGCTACCTCTCCCTTACCTTCGCCCCAAGTCACGTAGAAGTACTCAATCCTGCTACATGATAATCAAATATTTCCAACGTTGGGAAATCGGTGACATCACATACTAGTTAAGAAACCACTGTCAGTGAACTTATATCCGGGGGAGAAAATCTACTAACTTACATACGCTGTGCGAGCAGTTTTCATTATAAGAAAATATACTCCCGAGGTACCGCATCAAGCACGACATTCCCGGAGAGCATAACATTTCGGTGCACCTGCTTTTGTGCGCTTGCTTGCGGTTATTTATAAACTACGCACAAGGCGCAAACCGCAGTGCGCATGTTTTCTCCGCCTGGCTAGAACTCGACATTCTCGTCAACGCCAATCTATGTGAGAGGATTTAGACCTCTGTGAAAACGAGTCCCTCTATAGAATAAATACCCAGATGCCAATGGGGGTTCTATCCGATGGCAGTGCATGGAGTGGTGGCTCCAGATTAAGGATGAGGAGAGGTAAAGATAACAGTTCGGTCGCCACGACGCGTTGCCAATCGAAATATCAGTACTAAAAGGCCCACCGCTCCGCTTTAGTCCGACTTTACATCCTGTGGAAATTGTCGAACGGAGGCTACATCGGGCTATATGAGTGTGAAAACCTATACTTCTCGCGTCGTTACTCAGTGCCGGTCTCCTGTTTCCCCCAGTCTTACGTACCCTTATTGATATTTGCTTCACGTTGAAACGTCCTAACGCAGCGTAAAGAGGTGTTTGAACCTCATTACTATAAAATCGCGATCGAAGGTAGACTACATACGCAAACGCCGAAACCCTCAGTTGGCCTTGTTGCAAGTATGGAACGTTGTAAAATTTTTCCTAGACGTTGAGCTATCGGTACAAGGTCGTTAGCGTCCTTACCCTTCACTTATATGCCCGACAAAACGCGGGTCCTAGTGCAGTGGTGGGAGCTTGGAATCCCGCAATACAAGGACAACCTGTATCTCGTTCGGCGTTCCGCGATCACTCGATCCCGAACCACTCCAAGCCTGGTTGATCAGCAAAAGCGGAAGGATGGATAAAGGGCTACTGGTTAATGGATGTAAACTTCCAATGATGAAATCCTGGAAACGAGGGATCGGGTTACGGTGGCGAACGGGGTACGGCAACGTGGCTATCTAGAGCCCGACGTTACGACTCATGTACATGCTGCTACGTGGTTGAAGCTGACGTTCAGATGAAGCAGTACTGAGTCCTAGGGCTTACTACTACTCCAATAGGTCTGGCCGGCCAGATACAAAAGTTCGTGGCGGCTCACCCCCTTTCTGGCGGGTGTAGCTTGCTGACCGGTTTGCTCGATAACACAGGCTAGCGAATAGTAATGAGGTTCGAAAACCTCTTTCCAACGACTGAAAGGGTCTACACGAACTATCTACATTTCCCCGCCCATGTCCTTCCGTCTGGTTGCTTCTGGAGATCCTTTCGCATTATACCGCAGCGTAGTGGCTCTGGCATATATGAAAAAATCCTTCTGTGGGTATTTGTGCCATCACTTATTGTTCGTACCGATATGGGATTACAAGTGCGATGTGATAATAAGCGAAGAAGCCAACATGTTACACTGTTCATGCGCTCCGGGTAATGTGCGGGCACCATGCTCAGTTCCCGCTCGCAGTTGTCACTGTCCCTGTTTCGGCACCATAATCAACATTTCCACGGCCACGCTGGTGAATAACCGAGGATACCGAAGTACAGCAAGAATGAGAGCGGGACTCCTCCATCTGCTTGTAATACGCCTTCAAGATAGTCCATAAAACGGTCGGGGTCTTGTTTCGGACTAGCCGCTTTGAAACGGTGCATAGTTGTGTCAAGTGTGGACATTGGCTTTCTATCCTCGTCAGCGATCCTCGGAAAGACTCGGGCAGTCGCCCCGAATCGTAATTAGGTAGTAGTGCGGCTCAAAAACTTCCTTCGACCTAACCGCTATAATGTTCGTAGATATAAATTTCGTTTCAGTATTAACAGGCGCACCGTATATATACGGAATGGTGTCGCCCCATTAGCTGCTCGCCAATATTTATCTAAGACCGCGCGCGTCTAGCGCCTTTAGTAGTTGCACCCGAGTATAGTAATGGGGTTCGAAGACTTCCTTCGCAAGGCTGCCATACTGTATCACAAGTACTGACGGAGCCCCGGAGGAGTGCAGGATACGGCAAAGGAGACCATTACCGGGGCATGAGTCCAAGTTAGCCCGTTAGGTGAAGGACGCTGATACAATAGTGAATCCGTTACTGAAAGGTTTAGAAGACCGGGGGGCTCGCACTAGGTCCAAATATTATGAACCCTACTCCTGCAACTGAATTGGCCGTCCAGGCGATATTTAAAAGGGGTTACTAGCAGGTTCATCGGAGCCCGTACTCCTTCCGGGCATAGTCGTTCGACGGGTAGAAATTCATCCAGTCGTGCCGGATACCCCGAGAATACCCCTATTTTTTGATCCTTCACCATCATCGTCCGCGGACTCATCTAAGTACCTCAGACCGAAACTGTTATCGTAGCGAAGAGCGAACTCGAATGACATCGCTTGTCCAACAGGGAAAATATGTAAAGTATATGCAGATTATTATAGGAAGATCACAAACTCCATCGCGCCTAGGCCAAAGACTTGCCAGAACAACATCTCTTCCAGAGCAAGGAAGTGTTTGAACCTCACTATTATCGAGAGAAGTCCCATGAATTTATAATAGTGAGGCTCAAAAACTTCCTTCATCGTCGGGCGCTGGGGCGAGCTAGGCTTCCCTAGCCGTCATTACTGTACCCACGCCAAATATTATCGAGTATGACTACGAAGCCTTCACAAGGGGCTGCAGTAACAGACTAACTCACGCACACCGCAACTACTATCCTAAATTGAGTAAGAAAACCCTCGACTATAGCCCTTGAATTAAATTCGCTATTTAAGGAAGACCGCGCTTCCGCTCGCCCGCGTATAGTTTACCAGTCCCAAGAAACATGTGTGGCCAGCCTACCTGAAGAGCTGTGTAAAGATAGATTCTGACATCCTCAAAAAGAAGTTTTCGAGCCGCACTACTACGCACGGAGCTCCGTTATTCAAGGCATGTCGAAGTACAGCGTGGTGGCCTCTCCTGTTCTCCACCCCAGCTAAACCCACCTTGTTCGAATTCGCGCAACTGTATATGACATGAACACTTACAGGGGTTAGAAGTTACTGCAACCAAGATAGAGCTCGTCGAAGTAATAGTGCGGTTCAAAAACTTCCTTCAATTGGTCTCATCACTTAAATTTAAGAGCTATTGTGAGTACAGGTACGGATGCGGCTTCAGTGGATCTTCAGCATTCATTCCTTGTAGTAATGGGGTTCGAAGACTTCCTTGCCAGGGTACCAAACAAGTCTTGCGCATCCTCCTCCCTAAGGAGGTATTTGAACCCCACTATTACCCACGATAGAACATGCAGGGTTTGATAGTGGAACACCTTTTAGAATCTGGGGATAAATTCCCAGGACTAATGTATGGCTGTAGTAATGAGGTTCAAAAACCTCCTTTTCAGGTGGATCGCAGGCCGTGCTGCCTCACAAGCTGGGACGCCGTCCACGGTATAGCCGGCGTCGGCAGTTACTGTGAAATAGCGGAAACTCGATCCCAATATATCATCTTACGTTTGGCGCCCAATAGTCGCCCAGTACCCGTTGACAGTTCTTTAACTCGGCTTAGAACTACTAGACAGGTTCAACCGAACCTTGCCCTAGTTCCCACTCCCGTAATTCATTTGGGTTTGCATCTAGAATACTGGAGGGTGCATAGACGAAACGTGTACGTCGGAGAAAACGTAAGAAAATGACCTAGACTCATAGTAGTGAGGTTCGAAGACTTCCTTTCAGTGAAATCGATCCACCACTCGCCGCGAAGAGATAATAGCATAGAGCACAAGTGCGCGAGTAGAGAAAAAGGCTATCCCAACCGGGCACGTCCTTCGTGTTTGGCGTTTACATACGGCACCCCGTTTCTGCACGTTAACCGTCTAGTATCCAACGGTGGATGGCGGACGCTAGACTATAGATATGAGATATCGAGACCTGGAGCTGGGTGTGGCTGCAGCCCGGGTCATTGCGGGCTGTGAATTCAAGGGCATGTAAACAAGCGTATATCGAACAGTGGATGGGCACCTGCAATACTCACGGTAGAGTTAGCTCACAGGATTCACGTTGAGGACTATGAGTCCCTCTTCGCTAGCAGTCTGGGGGGATATGGAGTTTAATAGCTTGACGTAGTAATGGGGCTCAAACACCTCTTTGTGTGAGCACAGCTACTTGCATTAAGAGATTCTAAACAGCGATCATCTCGGCTATTTCGGGCCAGCCTTTTCGGCAGGATGTTATGTAGCATTTCTGGAAGCTTCCCCCTCGAATCTACTAGTGGTGAGAAGATGCCCCACCGATATTACTCTTTAATCTTGAGAAACCTAAAACCGATCTGACCTCAGACGGGCGGCTCCCACCCGAGGATAAACTCGTCAATAATAATGTGGCTCGAACACTTCTTTTCTCACTAGGCTTTTACGACACGCCACATGTATTTAAGCATCTACCTAACTTGTGTCTGCTGATATACAGCGCATTCTACGCCCAACCTACCAATTACTTCAACGTAGTGCGTGGCTAAAATTCAGGGGAGCTTCATCTCTGTCTTAATTTGAAGGTTCTTCCGGGGCGTTTGGGAATCTTCGTGCCTTTTGCGAGGTTAAGGTATCAAAGAAGTTTTCGAACCACATTATTACCGCCTTAAGCACCGGCGCATCCTGCTCGTGACAACTCTACCCTGCCCTGATAAAGGCACTGAACGTTCCAGAGAGTGCATCATTGACACGCGAGCAGGCCACAGTAGCCACAAGACGTATGGGTGATTATAGAATTGGTGGAGGTGTTGTTAACGATCAGGAGGACATTAGTGGGAGTTAGGAAAGACCCTATGTTCTCTCTATCGCGGACTTGTAACTTGACAAGCAAAAGGGTAAGAGAGCTGCACACCGAAGCAGGCCCTTCCTATACCTGTTTTTCCTACGCGTAGAGAGGAATCCAGAAAGGTGATAATTGGCATTCGATGAAAAAACAGTGTGCCACTGACTTAGTTCTATATGTGAAGAGCCTGTTAGCACGTGACGGCGGCCTTGGTATAGAGCCCTTAATGGTCTCCATCGCGTAGTAATGGGGCTCGAAAACCTCCTTACTTGGGATTGCGTGGCCTCCTTGTGAGTCATACACAAGGCTTAGGGCTATGGGGCGATACACTCCTTTTCGCGGCGCATGGGGCGGTGATGCCTACATAGTAGTAGTGACTGCCTTTCTGGGGGGCTATTTGTGGATGACCAACACCTGACCAGCGATGCAATCGCTAGGGGAGGTACACCTCTCATATGTTACAACAATCACCGAATTGTGTTTCGAATTCGAATCAAGTTTGCGGTGTCGACCAGATCTGGTCTTGCTGCCATACCGGGTTCGCCGCCTCCGGTGGATAGAACTGCATCTTAAGACATCTGGACCCAGCGGTAAGTAGCGGGAAGAGTTTAGAGTCATTCGTACAACTACAGGCTAAGGGCTTACTGGGGAGTTGTTGTAGGGCATAAAGATCGCCCCATGACTTTTCGTACTTTCCCCGATAGTTCACTCGCAGCGAGCTGCGGCTGGGCTTCGCCACACGAGTACGGGCAACATTTATCTCCTCTAATCACTGGGCACCGCGCGAGGAAATAGAAAACCCTAATCAGTGCTCATGGGCGCATCTATTGGTCTCCGCATGCACGATGCCGCGGAGTGCTTAGTTGTCCCTGCATAATCTTCGTAGATGTATAAGAGATTACCTATTTATTCGGTTTCGGTTCTAGACGTACCTTGCCGCATGAGTATAGGCTAATGAACTGAGTTGGCGCCAGAGGGAAAGGCATAATAATGCGGCTCGAATACTTCCTTAAGGAAGTATTCGAACCACATTACTAT'
#PEP = 'KEVFEPHYY'
#ANS = ['AAGGAAGTATTTGAGCCTCATTATTAC',
#'AAAGAGGTGTTTGAACCTCATTACTAT',
#'AAGGAGGTATTTGAACCCCACTATTAC',
#'AAAGAAGTTTTCGAACCACATTATTAC',
#'AAGGAAGTGTTTGAACCTCACTATTAT',
#'AAAGAAGTTTTCGAGCCGCACTACTAC',
#'AAGGAAGTATTCGAACCACATTACTAT',
#'ATAATAATGCGGCTCGAATACTTCCTT',
#'GTAGTAATGGGGCTCGAAAACCTCCTT',
#'GTAGTAATGAGGTTCAAAAACCTCCTT',
#'GTAGTAATGGGGTTCGAAGACTTCCTT',
#'ATAATAGTGAGGCTCAAAAACTTCCTT',
#'ATAGTAATGGGGTTCGAAGACTTCCTT',
#'GTAGTAGTGCGGCTCAAAAACTTCCTT',
#'ATAGTAATGAGGTTCGAAAACCTCTTT',
#'ATAATAATGTGGCTCGAACACTTCTTT',
#'GTAGTAATGGGGCTCAAACACCTCTTT',
#'ATAGTAGTGAGGTTCGAAGACTTCCTT',
#'GTAATAGTGCGGTTCAAAAACTTCCTT',
#'ATAGTAGTGTGGTTCAAATACCTCCTT',
#]

#DNA = 'ACTGCGCCGACCAGCCATGAGCCTTTAGTACGACAATCCAACGGACGGCCGGAACGCCCCTTCTTCCAATGAAAGAAAGGTAAGAGGGTGTCCGCGGACCGCAGTTTCGTCCCCAAGTTACTACGCACGACATTGAGTCAGTGGTTGATCCCATATATTAGCGAATCGCACAAGCACAGTTAGAAAACATAACCGCCTATGGTTGGGGCATACAGCTTTCTTTCTCAAAGTTCCTTAACGTTGCAACGTGACATGTCAAAATTTTTCACAGGATCCTTGCAGGACACGGGGAGTACTGATATTGGGTCTAAACGGCACTTCGGGTGAGGAACAACTCCATCTTAACGTCCGGGCGTACTCGAACACACCTTTCCCGGGCCAAGGGCGAGCGAAAAAAAACTTCGAATGAGAGCTCTACGACCATAACGCCTGGCTTGAAGCGATGGTGGCTGTTCTCCTATCACAAAGGTTCCTGAATGTGTCAGAATGAAAGAGTCTAAACACAGAAGGGTTCCCTGATCCAGTAAATGACCCAATGAATATTCCAGGATTGTCGCCAGTGCCGCATCGTCGCACTTACGGGAACAGCTGGGTCGAATGAACACACAACATGAGCGGCAGTGGCGCAATTCTCTCTAACAAAGCCCCTCCGTCGGTCCTAGCATATAGAGGTTACTATTGGCTACTTATGGTCACTGGCAAGCTCCAAAACCTCTACGCCTTCATGTCTCGTAGGAATGCCCATGCCTCGCTCGATAGTACGACGCTGTCGCTGGAATTCTTCTTGGCCATTGCGGCGTCGCGCTAGTCGGCCATAGTCGCAGAATGAAATAGCACAGTGATTCGAACTAAGGATTGAGGAGTTCCCCACAAGGTCCTTACCGGTGGATTTTTTCCCGCTGGGGAAACTGTACAGATTATTCAAGGATATTCTCCATTGAACGTGTTATTATCAGAATTAAGTGGTACTGACCGACCTTTGATAGAGATGTTGCCCTTTCCATTATTTAGACCCCTGTGTCCCCACCGTTCTCACCGAGCTTGTTTCCAAACTCGCTGAACGCATCCGCCACACGGACTAATGGCCGGGCCACGTTTGTGAATCCTTCTCCAGATTACCCAATGGATATTCCATGACTGTCTAATGCGGGCATCTAGAGAGAAAGGCAGTCGTGGAACATACATTGGGTTATTCGGCACAATGACCCAATGGATATTCCAAGATTGCCGCTCCGCCGTGACTTCCCATGCTATTCTCTGGAGTTCCCCTGACAACTGTCATTGAATAATGCTCGGCAACATTTTAGGGCACTAAGTGAGACGCGGGAGAGACATTGGGATAAGGCGCTCGAGGGGGAAACCAAAGTATTCGCCTATCCCCAGTGGTATTCACTTGCGTTTTTCAGCAGTTTTTATTACACTCAGCGATTCGGCAGGGTCCATCCATAGCTTTTGGCTCCAAGCCTACCCCTCCGAGGCAATTCCGGGTTATGGATCCACCTGATCTTTCGAGCCCAGCAGGAGCGGATTGGAGACGCGAACGGATCATTGCATGCGCACGAAAGCCAATACATATTCGACAACCGTCAGTCCTGGAATATACATTGGGTTATTCATTACTGAGAAGAAACATGTGACGAAGGAGTAGTGCCTCATGGAACATTGGTGACTGAGACAGTAATTCTCCCGATTGAAGTTGTTGGTTCCAACTACACTCCACTCATCGAAATTACCCAATGAATGTTCCACGATTGGCGCCTCGAAGTGATCCTACTGTCGCCGTTCGTACCGACTATTAGGACCCTTACCGTGCAGGTTCTGTGCACTTTTGACGCCTTACCTCGGGATCTAGTCCGCCAGTCCTGGAATATCCATTGGGTGATAGAGTCGCACTGGCAAGTTTTAGCTCCTCCAATTCTTTCTGGGTCCGACAACCAATCAGTACACTCGCTCAGGTTTTGTACATCTTGCATAAGAGACCATGGGCGCCGCCTTCACATTTGATATCGGTCACACGTGCACGTGCAGATAGGTTGTTTTGGGACAGCTGAACCCGTTCGTAAAATTAATTAGATCATGGCTGGAATGGTCAATCTACAGTCTCGAATACGGAAATCTTCTTAGAGGCTTCCCCCACTGTCTTCCGATACCCGAACTGTCTCAACCGCAAATTTGAAGCCAAGGCGGCCGCGTCCAGAGCTCGTCAGGAAGAATGTTTGTAAAGGTGATAGGGTATACGCATCGCGCGAGCTAGATACTTAACTGGACACCCCCACGATTGACTTTTTTTTTTCGTTCGGGCCCTTTCTCCCACTGCACAGAATTCAATGAGATGAAGATCACCCAGTGGATGTTCCAAGACTGACGCATTTCCCTCAAACGCCCAGTTCCATGCGGTTGGTTGAGCGCACCCCGGTCTAGGCAAGTGCGTACAATCACGTGAGCATTCGTGTAGAGGGCGGAAGTTAGCGACCTACCACCTGGCAACACAGACGTAGCCCGCTAGGTGTCCAAACGCTCCAAATAATTCACCCTGTAAGGAGCCCTCGCATAATACGAGACAATTGACAAGACCTAATACAGCAGATCCAAACAGGCTACCGCTGTTGTAAGTCTGCTAAGGCCTGTAAGTTAGCTGTGCCAATACTGACCGTGCACATACGACTTCTCCCGGCTGGGCGTCCGTAAAATCACGGTGGCACCTACAAAAAAGTTTTGTAGATAGCGATCGGGAACTTGAAAGGAATAGAGACTGCTGGATCTGCTGGTATATCACTCGCTCTGAAGACTGGATCATACAAAGAGGCTGGTCGGCGAGAAGTCCGAGTGTCACCCTCCTAGTCTTCTTCTTACGAACCCGGATAATCCTTTTCTCCTATACCAATGGTCCACCTTAAACCGGGTACATTTTTATTCGACAAAGTTGGAATATACATTGGGTGATCTCCGTAGCGGTCGCACACCTGTTCAGACCTCCAACTTCGTCAAGCACTAGGTGTGATTGCCCCATAGAGGCACCTTGCAGCGCCAGAGCTGGAATATCCATTGGGTTATCAGGCGTATGAAAAACGTTTTAACTACACAATAAAGGGATGCCCGCTGCCCCCGGCGCGCAGGACTCACAGATGTACGGGGGCATATCAGGGATCCAAGTAATATCCTGATCTATTAGAGATTTCAGGGAAAGTCTCGGAGAGTCGACTGACGACAGTCTAGCACCTTTGCCGTTGAAGGAGCAGCCGGCTGTTGTCGCTTACGAGTCGCGGGCCGGGGGGGATAATCTCAAGCTTGTACGTATGGTCGGACCTTTGGCAGAAGAGTTTGTACGAGTCGGATCCCGAACGGAGGTAGATAAATAGCATTGCTAAAAGGAGTCTGATGAACATTCATCATCAGGCTTCTACGCGCAAAGCACATGACCTCACGGAATTCGGGATCATACCACAAGGATATCGGACGATCGGTGGAGTTATCTGACGACGAGGTCGCATTCCTGCCGTACTACAAGCATCATTCTTCTAGACTAAAAGCCCCATAAAGGTAATGTTTATCAATTCCGAGGCACACAACACACCGGATGGAATGTTTAGTGTCAGAGACTAATAGTCCTACTGCCAACAGGTTGTGAGGCATCACCGTGAAGGTCAATAAGCATAGGGATGACCCAGTGAATATTCCATGATTGCCGGTTGGCCAGCGTGCTCGACGAGCGATCGAAGTAAGTCACGAGTGAATCGTCCGAATACACCTTATTCTCGGGTGTGGCAACAAAGACCCCTAACTATTCCCCCTACGGGGCGGTCATGCCGCAAATGTAATTTGAACGATAAATGTTTAGTAGTACTAGATAGCCCATTTATTTCCTAAGAGCCGCTAATGTATGCATAGTCAACCAGAAGCGTTCGGGAGGCGGAAGCCTAGTCGAATCCAGGTCCATTGATGCCTTGTAAAGGGGCACCTCATACACACGGCCTCTATTACCCAGTGGATGTTCCAGCTTTGACGCCATGTAGAATGGTGGCACGACCTTTTGCACCTCGATGGCCATTTATGTGGCTGGAATCAGCGAGATAACTTGGAGTTTCTAACACATTTTTAATGTGTTAGTTCCGGTCAACGGTCTGGGGGCTACCCAGTCTAACCTAGAGAGCGCACCCTATGAACTGAAAAGAAATTTCGGGGTCTTAATTCGGCTAAATACGTGTGAAAGCCTTTCACGCTCAGCGCCTGCCCGGGCGAGGAAGTAGCACGCCATAGGAGGTCGTGTTAGAACAAAAATCTGAATTGTACGTGGCGCCGGTAGACCGCGTTTATGTGCCACAGCGCATTACTTGGTCGAGGCCAGGCAGTCATGGAATATCCACTGGGTAATCTCGGTTGGACCGTTCCAGAAATAACCCGGCCTATGTTTCCCATATCGTGTATGGATCTGAATAGTTCAGGTTTTATTCCTACTTGTATAGTTATTAAACAAGTATGGAAATTTGGCTCGTCGTCCGGAGAGGGCAAGATAGAGATGATGCATACCGCTCCCGGACAGACGAAGACCTTGGGGTGACTCGGAATTATCCATACTCGTTGGCACGTCTGTGCAGCGACTCGTTCGTAGTATATATCCAATCGACGATGGGATGGTATCTGATTCTGGCCGTGTCGCAACGCCGGACCGAAACGAGGGTATCTCGGCCGCCGTCCATGTGTGGAGCTAAGAAGTGCGGTACCAATCTGCGGGGACAAAGAGAATAGAAAACCGCGCATTAACCGATTCTCAATAGATAAGTGACCTCCAGAACAGCTGTTCACTAGGCACCGAGACGTCCGTTTCAACGAATCACCCAATGGATGTTCCAGCTTTGGCGATCAAACGGGTATTACGCTTATAAGGTCAGTACGGACCCGGAGTCTAGGCACACCGTCGGTACTTCTTGGGACATTCGTACGTAGCGGCCAGCACTATTGTGTTCCAAAGGGCATGAAGCAAGTTGGCGCTCCACACGTCAAAGTTGGAACATCCATTGGGTTATTAGACCAATCCCGACCAAAGTATCTTTGCGCCGAGAGACAGCGAAGCGGGTTAGTAACTTGTTCATCTCCGCTGTGCGCAAGGATCTCTCTCGTGGGCAGCGAGGTCGCATTACCGCAGGGACCGACAGAGCTGGAACATACACTGGGTCATATCTAGTAGTGCGGTCCTTCAGGCGGGGCCGGTCTCCGCGTGATCTCCCATTGCCCCGTATTCGGGAGCATTGCTCATAAACTTGCAGCCAAAAACAGAAGGGGATTCGTACGTCACAGGGCTTTTAGTAGTGGTTCAAAAATGTCCCATTTGACTTTTCTCTTCCGGTGCCGTTCTAGCTACATGCCGGAGTTTTTTACAACGCCACGTAAAGTTGTCCCCCGCGCCCTAGTGGGCACCAGCGAGTCCTGGTCATACCTACGGCGCGTCCTTATGACCGGGATCACTTCCAGTCTTTTCCTACATCGCAGCATTTTCCCCGTTCTCACAAATAGACCATACAAGGAGCTTGCTAACTGGGACTTCAAGCAAAATACTAAAAGATGAGAGATCTAGAACACGGCCCGACGTGAAGTTCCCGTGATGTACGGGCTTAATCTCTACGCTCAAGAGTCTTCTACCTAGTTCTGCCGTCGGGTGACCACAGGAGTGATGCTAGTCGGTGGGGGATAATAACCCAATGGATGTTCCATGATTGGCGATTACCGCACAGGGCGTGGCCTGCTCATTGGCTCCGAGGCTGTTAACGGCATTTCTTAGCCCAAGGAGGTGTTTAGGCGTAATTAGCACTTGAGTAATGGGGCGTTGTTCCCTCTCGTCTTGGAGCATCGACGGGTGCCACTTATTCACTCGCGTTCCGCGGAACATCCATCGAGCAATAATCAGGTCCACCTCGCGAAAGAGGGCAATGGCACGTAGGTCTTCTGTGGTTTGAATGGGTAAGGTTCAAATAGGATATTCACTAGAGCCGCGTTGTGTGATTGTTAACTCCCTTACCGATTAGTTAACGTCGGCGACGCGTCGACCCGCTGATTTCTTAACGGGGCAAGTCATTAACCGTATCCACCGGATAGAGACTAGTGGATCCACCGCGATACAGCTCTTCATGCGCTAGTCTACCGGCTTGTACTTTCCTCCAAATGACGTAGCAAACAATAGCCGCTTCCAGCATCACTTATGGGACGGTAATGGGGATCCTCAATGCAGGCCGCTCTGGTCCTATCGTACTAGAAAGATACCACATCAGGCCAACAGGTTATGATTTTAACCCTGAATGTATTAATTGGGTGGTTTCACGTTATTCGACTGGGCCGTCCACAGAGTCACTGGCAATATTTTAGTAATCGATTCTTTATGGGTGTTCCTCTGATTTAAATAATTGGGCTCTTCACAATGCCTCTTGCAAGCCGGGCACGACTGATCAGATCTTTGAGCGCGGCATGCAAAAGGATGCTGCTATTGATCAGACGACCCATTGACGTCCGACACGCGTTCAGATAGTCGGCAACCTGGACTTGATGATGGGCGCTCCCACACTGGTACCGAAACCGTCTAACTGATATTTATCAACTTTTTCTCCGTTTTCGAAATCCCACGAATTTTACTTGGATGCGTGGGCGGTGGCTGTCACCAGTTGCCCCCTGCCACTCCTTTCTGTTCATGCAATTGTCGCGGTTGAACGTTGGCAGGTATGACTCCATAGGCTCAGTGTGTCAATTCTGAAGCGAGTCTCGGTACCTATTCGGTGCCGATGAGGGTGTCCGATAGGAATATGGGTATCATTTACCTAAACAGGGCAATTAGTCCTTTCGGCTCGTGTAATGTGGCGGTGATCACGGCGTCCAATTAGAACCGATCGATCCTTCAACAGTGTGTTGTAGTGCGTGCCTGTCCTCACTTTCACTGAGTTTACAGTTACGGCTCGTAGCAGAAACCTTCGGTAGCGATCAGGGTGGTCCTAGGGGTAGTGGCATAGATAGTAGTAATGCGTAATGCCCTGTCGTTGCTGGTCGCCTACCAACGACGAACTAATGACACCGCGGCATTTTAGCAGTGATCACCGGTACTAAGATAAAATCGGAAGATGTCCCCTTCAAGACGGGTCAATGCGTCCCATTGCACTAAACGCTGCACCATCGTCCTGATCTTGGGTAGCTGGCGAATGAGGACCGCCATCGTGTCGATTGGAGATAAACGCGTGTTTCCATGACTGGCTATGTTAGTCAGTGCACCGACCTGAACTGAACTTTCACTTCGAGACTCCAGGACGAGTAAGCTCGTTAGGCAGTCTTGGAATATTCATTGGGTGATTCTGCATATACATTGAACGCTGGTGTTTGGGTGGACACAATACTGTTGAACTGTCCGGTCTGTCTCTCACGGACGGCAGGAACTCCCGGTGACACTGTGCGGTGTGGCCTGCACTTTGCCAAAGCCCACCGAGCGTGGTATGGCGCCAATCATGGAATATTCATTGGGTAATTCTCTGTCTACGGGTCCTCACAAGTAAAATATCTTTACCGCGTCGGCGGGACCAGGGACTCGTGTATCGTTCTTAGTCGTCGCTTCTGTCCATACTGGTACTAATAACGTCTTCCATATGGCACCGCGTGCATTTACTAACGTATTAACTAAAGACCTACTCTTTCTCTTCTGGGGGTTATTGTACTTCACAAAGATCGAACACTTTCGAAAAGGACAATGCTCTTCTATTACAAGTTGGCTCCTGAAGTGTTAGGCGGTCATTCCCCCGCCGGATGCCTATTCTAGCGCCTTTAGGAATGAAGAATTCTCATCGAGGTTGTAATGTGCTGGGTGCACGCTGGCGAAGTTAGGCCAAAGGGGTTGGGAAAATCATGCGACTAATGTGAAATAAAGCTGAGTACAACAGATTCACATCATAGGCTGCTACGAGTCTTTTTGTAACAGTCAGTCGCATTCATTGGTGGGTTGATAGATTTCCTCCTTGATTCGCCAAGTCATGCATGTGAATGTCTACATATGGCATGGCGTTGCAGAAATTCATAAATATCCTCTCCCGTCCATTAAGGCAGAGCTGGAACATACATTGGGTTATTATAACGAGTAACGTGGGACATCGCGCTCTAGCCGATACATTCCACCACTTTTGATCACCTGCCAACCATGCCCCTGCGGAAGACTGAATGGTATCCCGACGGAGTAAAACAGGTTGGCACGCCACGAAACAACCAGAGTATCTTCTCTAGGACTCCAGACACCTAACTTTTTTGCATGGCTGGGCATCGAGAAAAACACTTAACTAGAGTGGCCCCCTATTACCCGCCGCGATGGCCCTCTAGCTGTAGAGCCAAGTAGGGGCGGGAGGCGACTGAGGCTTTCCTGCAGCACTCAAAAGGGAGCCGCGCAT'
#PEP = 'RQSWNIHWVI'

#PEP = 'VKLFPWFNQY'

def loadgenomefile(genomefile):
    x = ''
    with open(genomefile, 'r') as f:
        for l in f:
            x = x+l.strip('\n')
            #print x
    return x

def loadcodonseq(codonfile):
    d = {}
    with open(codonfile, 'r') as f:
        for l in f:
            line = l.strip('\n').split(' ')
            d[line[0]] = line[1]
    return d

def loadcodonaa(codonfile):
    d = {}
    with open(codonfile, 'r') as f:
        for l in f:
            line = l.strip('\n').split(' ')
            if line[1] not in d:
                d[line[1]] = []
            d[line[1]].append(line[0])
    return d

def rnatoprotein(p, codonfile):
    d = loadcodonseq(codonfile)
    pattern = list(p)
    codind = np.arange(len(p)).reshape(len(p)/3,3)
    cod = np.array(pattern)[codind]
    pseq = []
    for x in cod:
        codstr = ''.join(x)
        pseq.append(d[codstr])
    return ''.join(pseq)


def getallDNAfrompep(pep, dnacodonfile):
    dcod = loadcodonaa(dnacodonfile)   
    lpep = []
    for p in pep:
        lpep.append(dcod[p])
    
    allseq = seqprod(lpep)
    return lpep, allseq


def seqprod(seqs):
    combinations = [''.join(i) for i in list(itertools.product(*seqs))]
    return combinations

def findseqindna(allseq, dna, foundseqlist, foundindlist):
    
    k = len(allseq[0])
    for n, b in enumerate(dna):
        word = dna[n:n+k]
        if allseq.count(word) > 0:
            foundseqlist.append(word)
            foundindlist.append(index)
            
    return foundseqlist, foundindlist

def findpepindna(dna, pep, dnacodonfile, seqindna, foundindlist):
    
    rcdna = cs.revcomp(dna)
    allseq = getallDNAfrompep(pep, dnacodonfile)
    
    
    #seqindna = []
    rcseqindna = []
    rcindindna = []
    
    findseqindna(allseq, dna, seqindna, foundindlist)
    findseqindna(allseq, rcdna, rcseqindna, rcindindna)
    seqindna.extend([cs.revcomp(seq) for seq in rcseqindna])
    foundindlist.extend([len(rcdna)-ind for ind in rcindindna])

    return seqindna, foundindlist
    

#with open(GENOMFILE, 'r') as f:
    #seqindna = []
    
    #counter = 0
    #for l in f:
        #dna = l.strip('\n')
        #linelen = len(dna)
    #for l in f:
        #f.next()
        #dna = dna+l.strip('\n')
        #seqindna.append((dna, PEP, DNACODONFILE, seqindna)
        #dna = l.strip('\n')

lpep, allseq = getallDNAfrompep(PEP, DNACODONFILE)
print lpep

#counter = 0
#dna = ''
#with open(GENOMFILE, 'r') as f:
    #dna = f.next()
    #indices = []
    #for l in f:
        #dna = dna+l.strip('\n')
        
        #for aacod in lpep[0]:
            #i = dna.find(aacod)
            #if i != -1:
                #for aacod in lpep[1]:
                    #j = dna[i:].find(aacod)
                
#dna = loadgenomefile(GENOMEFILE)


#dcod = loadcodonaa(dnacodonfile)
#PEP = 'VKLFPWFNQY'

#nstart = 0
#pepnum = 0
#i = 0

#dna = 'GGGTAAAACTATTCCCATGGTTTAATCAATACGG'
#dna = 'GGGG'

#def findnumseq(dna, pepnum, i, nstart):
    #print 'i', i
    #cod = dna[i:i+3]
    #if len(cod) != 3:
        #print 'nstart'
        #return nstart
    #print 'cod', cod
    #print 'pepnum', pepnum
    
    #if cod in lpep[pepnum]:
        #pepnum=pepnum+1
        #if pepnum == 10:
            #nstart = nstart+1
            #print 'nstart', nstart
            #inew = i+3
            #print inew
            #if inew > len(dna):
                #return
            #else:
                #findnumseq(dna, 0, i+3, nstart)
        #else: 
            #findnumseq(dna, pepnum+1, i+3, nstart)
    #else:
        #n =  i+1
        #findnumseq(dna, pepnum, n, nstart)
        
    #return nstart

#counter = len(PEP)

#def findnumseq(dna, pepcounter, i, seqcounter):
    ##print 'istart', i
    #print 'seqcounter', seqcounter
    ##print 'x'
    #cod = dna[i:i+3]
    #if len(cod) < 3:
        #return
    
    #if cod in lpep[pepcounter]:
        #pepcounter = pepcounter+1
        ##print 'pepcounter', pepcounter
        #if pepcounter == 10:
            #seqcounter = seqcounter+1
            
            #pepcounter = 0
        ##print 'newcod', cod
        ##print ('i-in', i)
        #findnumseq(dna, pepcounter, i+3, seqcounter)
    
    #else:
        ##print 'elseseqcounter', seqcounter
        #print 'check'
        #findnumseq(dna, pepcounter, i+1, seqcounter)

def findnumseq(dna, pepcounter, seqcounter):
    #print 'istart', i
    #print 'seqcounter', seqcounter
    #print 'x'
    for i, b in enumerate(dna):
        
        cod = dna[i:i+3]
        if len(cod) < 3:
            return seqcounter
    
        foundseq = True
        for j in range(2):
            if cod not in lpep[j]:
                foundseq=False
                break
        seqcounter += 1 if foundseq else 0
        
                #print 'pepcounter', pepcounter
 
    
    #print 'seqcounter', seqcounter
                #pepcounter = 0
            #print 'newcod', cod
            #print ('i-in', i)
            #findnumseq(dna[i+3:], pepcounter, seqcounter)
    
    #else:
        ##print 'elseseqcounter', seqcounter
        #print 'check'
        #findnumseq(dna[i+1:], pepcounter, seqcounter)
    

print findnumseq(DNA, 0, 0)
    #print ('i', i)
    #print ('cod', cod)
    #print('final_seqcounter', seqcounter)
    ##return 

    #return seqcounter

#x = 

#findnumseq(dna, 0, 0)
#pepcounter = 0
#nstart = 0
#for i, b in enumerate(dna):
    #cod = dna[i:i+3]
    ##print cod
    #if cod in lpep[0]:
        #i = i+3
        #cod = dna[i:i+3]
        #if cod in lpep[1]:
            #i = i+3
            #cod = dna[i:i+3]
            #if cod in lpep[2]:
                #i = i+3
                #cod = dna[i:i+3]
                #if cod in lpep[3]:
                    #i = i+3
                    #cod = dna[i:i+3]
                    #if cod in lpep[4]:
                        #i = i+3
                        #cod = dna[i:i+3]
                        #if cod in lpep[5]:
                            #i = i+3
                            #cod = dna[i:i+3]
                            #if cod in lpep[6]:
                                #i = i+3
                                #cod = dna[i:i+3]
                                #if cod in lpep[7]:
                                    #i = i+3
                                    #cod = dna[i:i+3]
                                    #if cod in lpep[8]:
                                        #i = i+3
                                        #cod = dna[i:i+3]                   
                                        #if cod in lpep[9]:
                                            #nstart = nstart+1

#print nstart

        
        
        #cod2 = dna[i:i+pepinds[1]]
        #if cod2 in lpep[1]:
            #i = i+pepinds[0]:
                
    
    
    #cod1 = dna[i:i+2]
    #if cod1 in lpep[0]:
        #cod2 = dna[i+3:i+5]
        #if cod2 in lpep[1]:
            #cod3 = dna[i+6:i+8]
            
#inds = []
#n = 2
#for i in enumerate(dna):
    #cod1 = dna[i:i+n]
    


#cProfile.run('loadgenomefile(GENOMEFILE)', 'profloadgenome')
#p = pstats.Stats('profloadgenome')
#p.strip_dirs().sort_stats(-1).print_stats()
#p.sort_stats('cumulative').print_stats(10)


#myans = findpepindna(dna, PEP, DNACODONFILE)
#print(len(myans))
#print myans
#print ANS
#print sorted(myans) == sorted(ANS)
#for x in myans:
    #print(x.strip('\''))
#rnad = loadcodonaa(CODONFILE)
#print rnad


#x = ['a', 'b', 'c']
#y = ['d', 'e', 'f']
#z = ['g', 'h', 'i']
##d = {1: x, 2:y, 3:z}
#m = [x, y, z]
##seqprod(m)
##print list(d.itervalues())
##print [a[0] for a in list(d.itervalues())]
##print list(itertools.product(*m))
#print seqprod(mwith open('ans.txt', 'r') as f:

